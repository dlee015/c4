<!doctype html>
<html>
<head>
    <title>WebSocket Demo</title>
    <style>
        /* define some CSS styling on page elements */
        #txtInput {width: 85%; height: 60px; float:left; padding: 10px;}
        #cmdInput {margin-left: 10px; width:10%; height:80px; font-weight: bold;}
		.container {
			width: 1920px;
		}
        #txtOutput {
            width: 26%; height: 720px; font-family: "Courier New";  
            border: 1px solid gray; margin-top: 10px; overflow:auto;float:left;
        }
		#grid {
            width: 70%; height: 720px; font-family: "Courier New";  
            border: 0px solid gray; margin-top: 10px; overflow:auto;float:right;padding-left:10px;
        }
		.grid { margin:1em auto; border-collapse:collapse }
		.grid td {
			cursor:pointer;
			width:30px; height:30px;
			border:1px solid #ccc;
			text-align:center;
			font-family:sans-serif; font-size:13px
		}
		.grid td.clicked {
			background-color:yellow;
			font-weight:bold; color:red;
		}
		.buttonBox { padding:10px;margin-top:730px; }
    </style>
</head>
<body>
    <textarea id="txtInput" placeholder="q)"></textarea>
    <button id="cmdInput" onclick="send();">Go</button>
    <div class="container">
	<div id="txtOutput"></div>
	<div id="grid"></div>
	</div>
    <br>
	<div class="buttonBox">
    <button type="button" onclick="callTab();">Call Tab</button>
    <button type="button" onclick="callGrid();">Call Grid</button>
	</div>
</body>
<script>
    var ws, cmd = "";
    var input=document.getElementById("txtInput");
    var output=document.getElementById("txtOutput");
	var gridBox=document.getElementById("grid");
	var fakeChild=document.createElement("fakeChild");
	fakeChild.setAttribute('id', "GridChild");
	gridBox.appendChild(fakeChild);
	var lastClicked;
    function connect(){
        if ("WebSocket" in window) {
            ws = new WebSocket("ws://sgscb04.firstderivatives.com:5000/");
            output.value="connecting...";
            ws.onopen=function(e){output.innerHTML="connected"};
            ws.onclose=function(e){output.innerHTML="disconnected"};
            ws.onerror=function(e){output.value=e.data};
            /* 
                when a message is received, 
                prepend the message to the display area 
                along with the input command 
            */
            ws.onmessage=function(e){
                /* 
                    the message is in plain text, so we need to convert 
                    ' ' to '&nbsp;'and '\n' to '<br />' in order to display 
                    spaces and newlines correctly within the HTML markup
                */
				var dictResponse;
				try {
					dictResponse=JSON.parse(e.data);
					} catch(ex){
					var formattedResponse = e.data.replace(/ /g, '&nbsp;')
                                        .replace(/\n/g, '<br />');
				
					output.innerHTML = cmd + formattedResponse;
					cmd="";
					return null;
					}
				
				if (dictResponse.grid){
					newGrid(dictResponse.grid)
				}
								
            }
        } else alert("WebSockets not supported on your browser.");
    }
    function send(){
        /* 
            store the input command so that we can access it later 
            to print in with the response 
        */
        cmd = "q)" + input.value + "<br />";
        /* send the input command across the WebSocket connection */
        ws.send(JSON.stringify({func:".c4.run",arg:input.value}));
        /* 
            reset the input test box to empty, and 
            focus the cursor back on it ready for the next input 
        */
        input.value="";
        input.focus();
    }
    function callTab(){
        ws.send(JSON.stringify({func:".c4.tab",arg:"`"}))
    }
    
    function callGrid(){
        ws.send(JSON.stringify({func:".c4.grid",arg:"`"}))
    }
    
	
	
	function createGrid(x){
	var grid = clickableGrid(x,function(el,row,col,i){
		
		console.log("Sending run job as:",x[row][0]+col)
		ws.send(JSON.stringify({func:".c4.run",arg:x[row][0]+col}));	
		el.className='clicked';
		if (lastClicked) lastClicked.className='';
		lastClicked = el;
	});
	
	grid.setAttribute('id', "GridChild");
	gridBox.appendChild(grid);

	}
	
	function removeGrid() {
    // Removes an element from the document
    var element = document.getElementById("GridChild");
    element.parentNode.removeChild(element);
	}
	
	function newGrid(x){
		removeGrid()
		createGrid(x)
	}
	
	function clickableGrid(x, callback ){
	var rows=x.length;
    var cols=x[0].length;
    var i=0;
    var grid = document.createElement('table');
    grid.className = 'grid';
    for (var r=0;r<rows;++r){
        var tr = grid.appendChild(document.createElement('tr'));
        for (var c=0;c<cols;++c){
            var cell = tr.appendChild(document.createElement('td'));
			if (x[r][c] == "0"){
			cell.innerHTML = " ";
			}
			else cell.innerHTML = x[r][c];
            if (c > 0 && r != rows-1){
            cell.addEventListener('click',(function(el,r,c,i){
                return function(){
                    callback(el,r,c,i);
                }
            })(cell,r,c,i),false);
            }
        }
    }
    return grid;
	}
	
    connect(); //call the connect function
</script>
</html>